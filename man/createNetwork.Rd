% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NN_network.R
\name{createNetwork}
\alias{createNetwork}
\alias{createNetwork,allMatrix-method}
\title{Create a network}
\usage{
\S4method{createNetwork}{allMatrix}(
  x,
  type = c("sNN", "kNN", "delaunay"),
  method = c("dbscan", "geometry", "RTriangle", "deldir"),
  max_distance = NULL,
  minimum_k = 0L,
  minimum_shared = 5,
  top_shared = 3,
  node_ids = NULL,
  include_weight = TRUE,
  include_distance = TRUE,
  as.igraph = TRUE,
  ...
)
}
\arguments{
\item{x}{data to treat as nodes. (\code{matrices} or \code{data.frame} inputs accepted)
\code{matrix} type inputs are assumed to be for creation of nearest neighbors.
\code{data.frame} input is assumed to be spatial type info, made for creation of
kNN or delaunay triangulation networks.}

\item{type}{specific type of network to create, given the input}

\item{method}{method used to create the type of network requested}

\item{max_distance}{maximum distance allowed to be connected}

\item{minimum_shared}{minimum shared neighbors}

\item{top_shared}{keep at ...}

\item{node_ids}{character. Node ID values to assign. If none are provided,
only integer indices will be used as node IDs.}

\item{include_weight}{include edge weight attribute in output}

\item{include_distance}{include edge distance attribute in output}

\item{as.igraph}{logical. Whether to return as \code{igraph}. Otherwise returns
as \code{data.table}}

\item{...}{additional params to pass. See details section}

\item{weight_fun}{function to calculate weights based on distance if
\code{include_distance = TRUE}. Default is \eqn{weight = 1 / (1 + distance})}
}
\value{
Either \code{igraph} if \code{as.igraph = TRUE} and \code{data.table} otherwise.
}
\description{
Create networks from node values.
}
\details{
This is a hub function for many different methods of finding nearest
neighbors. The \code{...} param can be used to pass additional params relevant
to specific methods. Additionally, some params used in only specific
functions are mentioned below.
\itemize{
\item \strong{k} number of neighbors to find for sNN and kNN type networks. Default is
}
}
\examples{
e <- GiottoData::loadSubObjectMini("exprObj")[] # dgCMatrix
expr_igraph <- createNetwork(t(e), node_ids = colnames(e))

pca <- GiottoData::loadSubObjectMini("dimObj")[]
pca_igraph <- createNetwork(pca, node_ids = rownames(pca))
}
